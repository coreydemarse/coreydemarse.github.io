import{_ as n,o as s,c as e,h as a}from"./app.8e3fde29.js";const f='{"title":"arrow functions vs declarations in js","description":"","frontmatter":{"title":"arrow functions vs declarations in js","date":"2025-04-22T00:00:00.000Z","author":"Corey DeMarse","gravatar":"74e3ab7e361c4141736de00ad444f90a","twitter":"@coreydemarse","head":[["meta",{"name":"keywords","content":"arrow functions declarations js javascript typescript ts which better function types"}]]},"headers":[{"level":2,"title":"Async Function Declaration","slug":"async-function-declaration"},{"level":2,"title":"Async Arrow Function Expression","slug":"async-arrow-function-expression"},{"level":2,"title":"Which is better?","slug":"which-is-better-1"},{"level":2,"title":"When function declarations win","slug":"when-function-declarations-win"},{"level":2,"title":"","slug":""}],"relativePath":"posts/arrow-functions-vs-declarations.md","lastUpdated":null}',t={name:"posts/arrow-functions-vs-declarations.md"},o=a(`<p>breaking down the two different types of functions</p><hr><p><a href="/blog.html">&lt;- return to blog</a></p><h1 id="which-is-better" tabindex="-1">Which is better? <a class="header-anchor" href="#which-is-better" aria-hidden="true">#</a></h1><p>Arrow functions or function declarations?</p><p>In this article we are going to break down the two different types of functions.</p><h2 id="async-function-declaration" tabindex="-1">Async Function Declaration <a class="header-anchor" href="#async-function-declaration" aria-hidden="true">#</a></h2><p>For example:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">example</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>This is an async function declaration.</p><p>Function declarations are hoisted, which means its definition is available throughout its scope. It is also a named function (its name is accessible within the function body for recursion and debugging).</p><h2 id="async-arrow-function-expression" tabindex="-1">Async Arrow Function Expression <a class="header-anchor" href="#async-arrow-function-expression" aria-hidden="true">#</a></h2><p>For example:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> example </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>This is an async arrow function expression.</p><p>Function expressions are not hoisted, it\u2019s assigned to a variable (example) and only available after the assignment.</p><p>Arrow functions have a lexically bound this and no own arguments object, among other differences from regular functions.</p><h2 id="which-is-better-1" tabindex="-1">Which is better? <a class="header-anchor" href="#which-is-better-1" aria-hidden="true">#</a></h2><p><strong>The Winner:</strong> Function Expressions</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> example </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u2705 Why it&#39;s better (in modern JS):</p><p><strong>Consistent scoping</strong></p><p>Arrow functions don\u2019t rebind this, arguments, or super. That makes them predictable in callbacks or component methods (like in Vue or React).</p><p><strong>Immutable by default</strong></p><p>Using <code>const</code> when necessary prevents reassignment \u2014 safer, less footguns.</p><p><strong>Clear async intent</strong></p><p><code>async</code> keyword is directly visible at the function definition site. Readability wins.</p><p><strong>Function expression &gt; declaration (in modules)</strong></p><p>Hoisting with function declarations (<code>async function example() {}</code>) can be misleading in modern module systems where temporal dead zone rules apply.</p><h2 id="when-function-declarations-win" tabindex="-1">When function declarations win <a class="header-anchor" href="#when-function-declarations-win" aria-hidden="true">#</a></h2><p>Function declarations win over function expressions in JavaScript in terms of hoisting\u2014they are fully hoisted to the top of their scope (i.e., available before they&#39;re defined in the code), while function expressions are not.</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><p><a href="/blog.html">&lt;- return to blog</a></p>`,33),i=[o];function r(c,l,p,d,h,u){return s(),e("div",null,i)}var g=n(t,[["render",r]]);export{f as __pageData,g as default};
